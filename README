An experiment in creating a Sinatra OAuth Provider.

Start the app with "ruby app.rb" and use it to create a message or two and a new consumer oauth application. When created, add the shared key and secret to the keys.rb file. Run "ruby request.rb" to get the authorization url and request token and secret. Add the request token and secret to the keys.rb file. Authorize your app. Then run "ruby access.rb" to get your access token and secret, add to keys.rb as well. Finally with your access tokens you can run "ruby query.rb" to call the API.

Requires:
Sinatra: http://github.com/sinatra/sinatra/tree/master
OAuth for Ruby: http://github.com/pelle/oauth/tree/master
OAuth Provider for Ruby: http://github.com/halorgium/oauth_provider/tree/master

Since the oauth_provider does not have a gem yet.
In the project:

  mkdir lib
  cd lib
  git clone git://github.com/halorgium/oauth_provider.git

One fix to oauth_provider class.
From http://github.com/singpolyma/oauth_provider we need to add the following to access the db from the provider obj.

In /lib/oauth_provider/lib/provider.rb add:

  attr_reader :backend

Thanks to pelle, halorgium (for auth_provider), and singpolyma (for the simple Sinatra example)! And to the Vancouver "Ruby in the Rain" event for opening my eyes to Sinatra. You guys rock!